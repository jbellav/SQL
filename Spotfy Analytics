# For this project, I downloaded Spotify data from Kaggle.
# I created a table to insert Spotify data into.
# Then, I performed analytics on the data using SQL. 

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#I inserted the Spotify Data .csv into the table.

#Next, I explored the data using the following SQL:

SELECT * FROM BIT_DB.Spotifydata

#1--What is the AVG length of Top 50 2021 Spotify Songs in seconds?

SELECT AVG(duration_ms)*0.001 AS AVG_duration
FROM BIT_DB.Spotifydata

#2--What are the top 10 songs from Top 50 Spotify Songs 2021 that are above/below the duration AVG?

SELECT track_name,duration_ms*0.001 AS seconds,
CASE 
WHEN duration_ms <197488.48 THEN "Below AVG"
WHEN duration_ms =197488.48 THEN "AVG"
WHEN duration_ms >197488.48 THEN "Above AVG"
END AS compare_AVG
FROM BIT_DB.Spotifydata
LIMIT 10


#3--What is the AVG 'Energy' from songs in Spotify Top 50 2021?

SELECT ROUND(AVG(energy),3) AS AVG_energy
FROM BIT_DB.Spotifydata

#4--How do the top 20 songs compare to AVG_energy?

SELECT artist_name, track_name, energy,
CASE
WHEN energy > 0.646 THEN "Above AVG"
WHEN energy = 0.646 THEN "Average"
WHEN energy < 0.646 THEN "Below AVG"
END AS CompareEnergy
FROM BIT_DB.Spotifydata
LIMIT 20


#5--What is the AVG popularity, danceability, and energy by artist and track?

SELECT artist_name, track_name,
avg(popularity), avg(danceability), avg(energy)
FROM BIT_DB.Spotifydata
GROUP BY artist_name, track_name
LIMIT 25


#6--Who are thet top 10 artists by popularity?

SELECT artist_name, track_name, popularity
FROM BIT_DB.Spotifydata
ORDER BY popularity desc
LIMIT 10

#7--What is the average speechiness in the Top 50 Spotify 2021 list?

SELECT avg(speechiness) AS AVG_speechiness
FROM BIT_DB.Spotifydata

#8--Using speechiness, what are the MOST "Speechy" songs in the Top 50?

SELECT artist_name, track_name, speechiness
FROM BIT_DB.Spotifydata
ORDER BY speechiness desc
LIMIT 20
